<script lang="ts">
  import { TableBody, TableBodyCell, TableBodyRow, TableHead, TableHeadCell, TableSearch, Button, Dropdown, Checkbox, ButtonGroup, Skeleton, DropdownItem, DropdownDivider, Tabs, TabItem, Spinner, Popover, Table, Hr, Input } from 'flowbite-svelte';
  import { onMount, onDestroy } from 'svelte';
  import ExcelJS from 'exceljs';

  import TableFilter from 'svelte-material-icons/TableFilter.svelte';
  import MicrosoftExcel from 'svelte-material-icons/MicrosoftExcel.svelte';
  import FilterOff from 'svelte-material-icons/FilterOff.svelte';
  import ChevronRight from 'svelte-material-icons/ChevronRight.svelte';
  import ChevronLeft from 'svelte-material-icons/ChevronLeft.svelte';
  import ChevronDown from 'svelte-material-icons/ChevronDown.svelte';
  import MenuUp from 'svelte-material-icons/MenuUp.svelte';
  import MenuDown from 'svelte-material-icons/MenuDown.svelte';
  import PageLast from 'svelte-material-icons/PageLast.svelte';
  import PageFirst from 'svelte-material-icons/PageFirst.svelte';
  import CheckCircle from 'svelte-material-icons/CheckCircle.svelte';
  import Close from 'svelte-material-icons/Close.svelte';
  import Magnify from 'svelte-material-icons/Magnify.svelte';
  import Filter from 'svelte-material-icons/Filter.svelte';
  import FilterPlus from 'svelte-material-icons/FilterPlus.svelte';
  import EmailOutline from 'svelte-material-icons/EmailOutline.svelte';
  import EmailOpenOutline from 'svelte-material-icons/EmailOpenOutline.svelte';

  interface DatosConsulta {
      fecha_inicio: number,
      fecha_fin: number,
      campos_tabla: string[],
      recepcion_o_termino: boolean
  };

  let consultaEstatusPorArea: DatosConsulta = {
      fecha_inicio: Date.now()-60*24*60*60*1000,
      fecha_fin: Date.now(),
      campos_tabla: ["atencion", "estatus"],
      recepcion_o_termino: true
  }

  let consultaNaturalezaPorEstatus: DatosConsulta = {
      fecha_inicio: Date.now()-60*24*60*60*1000,
      fecha_fin: Date.now(),
      campos_tabla: ["tipo", "estatus"],
      recepcion_o_termino: true
  }

  let consultaEstatusPorFechaTermino: DatosConsulta = {
      fecha_inicio: Date.now()-60*24*60*60*1000,
      fecha_fin: Date.now(),
      campos_tabla: ["estatus", "fecha_termino"],
      recepcion_o_termino: false  // Se consulta el rango de fecha_inicio-fecha_fin por fecha de término 
  }

  let estatusPorArea: any[] = [];
  let naturalezaPorEstatus: any[] = [];
  let estatusPorFechaTermino: any[] = [];

  const consultarBaseOpiniones = async () => {  // Responde con un booleano que indica si se deben actualizar los datos de la tabla o no.
      const headers = { 'Content-Type': 'application/json' }
      const respuestaEstatusPorArea = await fetch(`/api/tablero`,{
          method: 'POST',
          headers,
          body: JSON.stringify(consultaEstatusPorArea)
      });

      const respuestaNaturalezaPorEstatus = await fetch(`/api/tablero`,{
          method: 'POST',
          headers,
          body: JSON.stringify(consultaNaturalezaPorEstatus)
      });

      const respuestaEstatusPorFechaTermino = await fetch(`/api/tablero`,{
          method: 'POST',
          headers,
          body: JSON.stringify(consultaEstatusPorFechaTermino)
      });

      estatusPorArea = await respuestaEstatusPorArea.json();
      naturalezaPorEstatus = await respuestaNaturalezaPorEstatus.json();
      estatusPorFechaTermino = await respuestaEstatusPorFechaTermino.json();
      
}

  let intervaloConsultaTiempoReal: ReturnType<typeof setInterval>;
  onMount(async () => {
  await consultarBaseOpiniones();
  // Configurar consulta periódica para actualización
  intervaloConsultaTiempoReal = setInterval(async () => { await consultarBaseOpiniones() }, 60000);
});
  onDestroy(() => {
      if (intervaloConsultaTiempoReal) clearInterval(intervaloConsultaTiempoReal);
  });
  // Termina - Consulta de los datos a la API y actualización periódica

  $: console.log(estatusPorArea)
  $: console.log(naturalezaPorEstatus)
  $: console.log(estatusPorFechaTermino)
</script>
